# coding: utf-8import sysimport osimport jsonimport PyQt5from PyQt5 import QtCore, QtGui, QtWidgets, Qtfrom PyQt5.QtWidgets import *from PyQt5.QtGui import QFont,QIconfrom PyQt5.QtCore import QCoreApplication#import qss#显示窗口def show_w():    app = QApplication(sys.argv)    w = QWidget()    sys.exit(app.exec())class UI(QWidget):    def __init__(self):        super().__init__()        #所有的进程信息列表        self.Process_list = []        #队列        self.Q1_list = []        self.Q2_list = []        self.Q3_list = []        self.TIME = -1        #时间片长度初始化        self.Q1_N = 2        self.Q2_N = 4        self.Q3_N = 8        #标识变量        self.N1 = 0        self.N2 = 0        self.N3 = 0        self.is_start = 0        self.arrive_time_dict = {}        self.remain_time_dict = {}        self.initUI()    def initUI(self):        #操作按钮        self.button_add = QPushButton('确认添加', self)  # 创建按钮        self.button_restart = QPushButton('重新开始', self)        self.button_next = QPushButton('下一时刻', self)        self.button_exit = QPushButton('退出', self)        self.button_add.move(140, 180)  # 移动按钮位置        self.button_next.move(10,60)        self.button_restart.move(10,100)        self.button_exit.move(10,140)        self.button_add.resize(180,30)        self.button_restart.resize(80, 30)        self.button_next.resize(80, 30)        self.button_exit.resize(80, 30)        #显示事件信息        self.eventbox = QTextEdit(self)        self.eventbox.setReadOnly(True)        self.eventbox.move(440,280)        self.eventbox.resize(140,190)        #显示进程信息        self.infobox1 = QTextEdit(self)        self.infobox1.setReadOnly(True)        self.infobox1.resize(200,150)        self.infobox1.move(380,60)        #显示队列信息        self.infoboxQ1 = QTextEdit(self)        self.infoboxQ1.setReadOnly(True)        self.infoboxQ1.move(130,310)        self.infoboxQ1.resize(60,160)        self.infoboxQ2 = QTextEdit(self)        self.infoboxQ2.setReadOnly(True)        self.infoboxQ2.move(230, 310)        self.infoboxQ2.resize(60,160)        self.infoboxQ3 = QTextEdit(self)        self.infoboxQ3.setReadOnly(True)        self.infoboxQ3.move(330,310)        self.infoboxQ3.resize(60,160)        #功能说明Label        self.label_TIME = QLabel("    ",self)        self.label_time = QLabel("当前时刻",self)        self.label1 = QLabel("进程名",self)        self.label2 = QLabel("到达时间",self)        self.label3 = QLabel("所需CPU时间",self)        self.label_TIME.move(60,340)        self.label_time.move(30,300)        self.label1.move(130,60)        self.label2.move(130,100)        self.label3.move(130,140)        #添加进程文本框        self.textbox1 = QLineEdit(self)        self.textbox2 = QLineEdit(self)        self.textbox3 = QLineEdit(self)        self.textbox1.resize(100,20)        self.textbox1.move(220,60)        self.textbox2.resize(100, 20)        self.textbox2.move(220, 100)        self.textbox3.resize(100, 20)        self.textbox3.move(220, 140)        #标签        self.label_Q1 = QLabel("Q1",self)        self.label_Q2 = QLabel("Q2", self)        self.label_Q3 = QLabel("Q3", self)        self.label_Q1.move(130,280)        self.label_Q2.move(230,280)        self.label_Q3.move(330,280)        #下拉框，用于修改每个队列的时间片长度，默认长度为2、4、8        self.combobox1 = QtWidgets.QComboBox(self)        self.combobox1.addItems(['1','2','3','4','5','6','7','8','9'])        self.combobox1.move(150,275)        self.combobox1.setCurrentIndex(1)#默认长度        self.combobox2 = QtWidgets.QComboBox(self)        self.combobox2.addItems(['1', '2', '3', '4', '5', '6', '7', '8', '9'])        self.combobox2.move(250, 275)        self.combobox2.setCurrentIndex(3)        self.combobox3 = QtWidgets.QComboBox(self)        self.combobox3.addItems(['1', '2', '3', '4', '5', '6', '7', '8', '9'])        self.combobox3.move(350, 275)        self.combobox3.setCurrentIndex(7)        #载入QSS样式文件        self.qssStyle = open(os.path.join('11.qss'),encoding = 'utf-8').read()        #self.qssStyle = qss.qss        self.setStyleSheet(self.qssStyle)        #点击按钮触发事件        self.button_add.clicked.connect(self.add_Process)        self.combobox1.currentIndexChanged.connect(self.changeQ1N)        self.combobox2.currentIndexChanged.connect(self.changeQ2N)        self.combobox3.currentIndexChanged.connect(self.changeQ3N)        self.button_restart.clicked.connect(self.restart)        self.button_next.clicked.connect(self.next)        self.button_exit.clicked.connect(QCoreApplication.instance().quit)        #设置窗口整体信息        self.setWindowTitle('多级反馈队列调度算法')        self.setFixedSize(640,540)        window_pale = QtGui.QPalette()        window_pale.setBrush(self.backgroundRole(),QtGui.QBrush(QtGui.QPixmap("background.jpg")))#载入背景图片        self.setPalette(window_pale)        self.show()    #修改时间片长度    def changeQ1N(self):        self.Q1_N = int(self.combobox1.currentText())    def changeQ2N(self):        self.Q2_N = int(self.combobox2.currentText())    def changeQ3N(self):        self.Q3_N = int(self.combobox3.currentText())    #重新开始，将各相关变量设为初始值    def  restart(self):        self.Q1_list.clear()        self.Q2_list.clear()        self.Q3_list.clear()        self.Process_list.clear()        self.arrive_time_dict.clear()        self.remain_time_dict.clear()        self.TIME = -1        self.label_TIME.setText('     ')        # 标识变量        self.N1 = 0        self.N2 = 0        self.N3 = 0        self.is_start = 0        self.infoboxQ1.clear()        self.infoboxQ2.clear()        self.infoboxQ3.clear()        self.infobox1.clear()        self.eventbox.clear()        self.eventbox.clear()    #更新进程信息    def update_Pinfo(self):        self.infobox1.clear()        for i in range(len(self.Process_list)):            name = str(self.Process_list[i][0])            arrive_time = str(self.Process_list[i][1])            serve_time = str(self.Process_list[i][2])            remain_time = str(self.Process_list[i][3])            #在信息框中显示输入的进程信息            self.infobox1.append("---------------")            self.infobox1.append("进程名:" + name)            self.infobox1.append("到达时间:" + arrive_time)            self.infobox1.append("所需CPU时间:" + serve_time)            self.infobox1.append("剩余时间:" + remain_time)    #添加进程    def add_Process(self):        #先做判空处理        if self.textbox1.text() == '' or self.textbox2.text() == '' or self.textbox3.text() == '':            pass        else:            Pname = self.textbox1.text()            Parrive_time = int(self.textbox2.text())            Pserve_time = int(self.textbox3.text())            Premain_time = Pserve_time            p = [Pname,Parrive_time,Pserve_time,Premain_time]            self.Process_list.append(p)            self.arrive_time_dict[Parrive_time] = p            self.remain_time_dict[Pname] = Premain_time            self.textbox1.clear()            self.textbox2.clear()            self.textbox3.clear()            self.update_Pinfo()    # 修改显示时刻    def next_time(self):        self.TIME = self.TIME + 1        time = str(self.TIME)        self.label_TIME.setText(time)    #显示队列信息    def printQ(self):        self.infoboxQ1.clear()        self.infoboxQ2.clear()        self.infoboxQ3.clear()        #在信息显示框显示进程的名字以及剩余的时间        for i in range(len(self.Q1_list)):            q1 = (self.Q1_list[i][0])            self.infoboxQ1.append(str(q1) + "[" + str(self.remain_time_dict[str(q1)]) + "]")        for i in range(len(self.Q2_list)):            q2 = (self.Q2_list[i][0])            self.infoboxQ2.append(str(q2) + "[" + str(self.remain_time_dict[str(q2)]) + "]")        for i in range(len(self.Q3_list)):            q3 = (self.Q3_list[i][0])            self.infoboxQ3.append(str(q3) + "[" + str(self.remain_time_dict[str(q3)]) + "]")    #点击下一时刻后进行的操作    def next(self):        self.next_time()        self.eventbox.append("---------")        self.eventbox.append("时刻" + str(self.TIME) + ":")        if self.Q1_list == []:#若Q1为空            if self.Q2_list == []:#若Q2为空                if self.Q3_list == []:#若Q3为空                    pass                else:#Q1 Q2为空，Q3不为空                    self.Q3_list[0][3] = self.Q3_list[0][3] - 1#将Q3队列首进程的剩余时间减1                    Pname3 = self.Q3_list[0][0]                    self.remain_time_dict[Pname3] = self.Q3_list[0][3]                    self.N3 = self.N3 + 1                    if self.Q3_list[0][3] == 0:#若该进程剩余时间为0                        self.eventbox.append("进程"+str(self.Q3_list[0][0])+"已完成")                        del self.Q3_list[0]#将该已完成的进程从队列中移除                        self.N3 = 0                    else:                        if self.N3 == self.Q3_N:#若分配的时间到达时间片长度                            self.N3 = 0                            self.Q3_list.append(self.Q3_list[0])#将该进程移到Q3队列队尾                            del self.Q3_list[0]            else:#Q1为空，Q2不为空                self.Q2_list[0][3] = self.Q2_list[0][3] - 1  # 将Q2队列首进程的剩余时间减1                Pname2 = self.Q2_list[0][0]                self.remain_time_dict[Pname2] = self.Q2_list[0][3]                self.N2 = self.N2 + 1                if self.Q2_list[0][3] == 0:  # 若该进程剩余时间为0                    self.eventbox.append("进程" + str(self.Q2_list[0][0]) + "已完成")                    del self.Q2_list[0]  # 将该已完成的进程从队列中移除                    self.N2 = 0                else:                    if self.N2 == self.Q2_N:                        self.N2 = 0                        self.Q3_list.append(self.Q2_list[0])                        del self.Q2_list[0]#将该进程移到下一个队列中        else:#Q1不为空            self.Q1_list[0][3] = self.Q1_list[0][3] - 1  # 将Q1队列首进程的剩余时间减1            Pname1 = self.Q1_list[0][0]            self.remain_time_dict[Pname1] = self.Q1_list[0][3]            self.N1 = self.N1 + 1            if self.Q1_list[0][3] == 0:  # 若该进程剩余时间为0                self.eventbox.append("进程" + str(self.Q1_list[0][0]) + "已完成")                del self.Q1_list[0]  # 将该已完成的进程从队列中移除                self.N1 = 0            else:                if self.N1 == self.Q1_N:                    self.N1 = 0                    self.Q2_list.append(self.Q1_list[0])                    del self.Q1_list[0]  # 将该进程移到下一个队列中        # 判断当前时间片是否有新的进程加入        if self.TIME in self.arrive_time_dict.keys():            P = self.arrive_time_dict[self.TIME]  # 获取当前时刻新加入的进程            self.Q1_list.append(P)            # 显示事件信息            self.eventbox.append(P[0] + "加入等待队列")        else:            pass        self.printQ()if __name__ == '__main__':    app = QApplication(sys.argv)    MainWindow = QtWidgets.QMainWindow()    ex = UI()    sys.exit(app.exec_())